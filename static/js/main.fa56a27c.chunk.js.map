{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","children","style","overflowY","height","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","Header","connect","search","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","payload","target","value","onRequestrobots","fetch","then","res","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa56a27c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow pw2 shadow-5 tc\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user) => {\n        const { id, name, email } = user;\n        return <Card key={id} id={id} name={name} email={email} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"searchbox\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n\n        height: \"500px\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <h1>Ooops. That is not goosd</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\n\nconst Header = () => {\n  return <h1 className=\"f1\">RoboFriends</h1>;\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SeachBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport Header from \"../components/Header\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    search: state.searchRobots.search,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestrobots: () => dispatch(requestRobots()),\n  };\n};\n\nconst App = (props) => {\n  const {\n    search,\n    onSearchChange,\n    onRequestrobots,\n    robots,\n    isPending,\n    error,\n  } = props;\n\n  useEffect(() => {\n    onRequestrobots();\n  }, []);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(search.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1 className=\"tc\">Loading...</h1>\n  ) : (\n    <div className=\"tc\">\n      <Header />\n      <SeachBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  });\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then((res) =>\n    res\n      .json()\n      .then((data) => {\n        dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\n      })\n      .catch((error) =>\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n      )\n  );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  search: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, search: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}